#!/bin/bash

# Copyright 2024 Authors of spidernet-io
# SPDX-License-Identifier: Apache-2.0

:<<EOF
同时进行两两主机之间的打流测试，包括同轨和跨轨网卡打流，在两个主机之间打流时，ASYNCHRONOUS=true 是让8个网卡同时打流，还是一个一个网卡打

example1:
    DURATION=30 LOOP_TIMES=2 ASYNCHRONOUS=true  ./testRdmaPair

example2:
    DURATION=10 LOOP_TIMES=1 ASYNCHRONOUS=true  ./testRdmaPair  "10.233.94.236  10.233.116.235 10.233.101.251"

EOF


#set -x
#set -o pipefail
set -o errexit
set -o nounset

if ! which ib_write_bw &>/dev/null; then
    echo "error, ib_write_bw tools not found"
    exit 1
fi

CURRENT_FILENAME=$(basename $0)
ENV_SSH_PORT=${ENV_SSH_PORT:-"2022"}

source /usr/sbin/rdmatools
source getAllEndpoints

POD_IP_LIST=${1:-""}
if [ -z "${POD_IP_LIST}" ] ;then 
    POD_IP_LIST=$(getOtherEndpoints 2>/dev/null) || true
fi
echo ""
echo "POD_IP_LIST: ${POD_IP_LIST}"
[ -n "${POD_IP_LIST}" ] || {
    echo "error, no remote hosts "
    exit 1
}

DEFAULT_LOCAL_INT=$( ip r | grep default | grep -Eo "dev .*" | awk '{print $2}' )
LOCAL_IP=$( ip -4 addr show ${DEFAULT_LOCAL_INT} | grep -oP '(?<=inet\s)[0-9]+(\.[0-9]+){3}' | head -1 )

WORKDIR="/tmp/${CURRENT_FILENAME}-$(date +%Y%m%d%H%M%S%N)"
REMOTE_INFOR_DIR="${WORKDIR}/remoteip"
REMOTE_OUTPUT_DIR="${WORKDIR}/output"
RESULT_DIR="${WORKDIR}/result"
mkdir -p ${WORKDIR}
mkdir -p ${REMOTE_INFOR_DIR}
mkdir -p ${RESULT_DIR}
mkdir -p ${REMOTE_OUTPUT_DIR}

echo "collecting local information ..."
LOCAL_RDMA_INFO=$(GetLocalRdmaDeviceIP)
[ -n "${LOCAL_RDMA_INFO}" ] || {
    echo "error, failed to get local rdma information"
    exit 1
}
LOCAL_INT=$( ip r | grep default | head -1 | grep -oE "dev [^[:space:]]+"  | awk '{print $2}' )
LOCAL_ENDPOINT_IP=$( ip -4 addr show ${LOCAL_INT} | grep -oP '(?<=inet\s)[0-9]+(\.[0-9]+){3}'	 )


echo "collecting remote information ..."
EXPECT_NUM=0
for ADDR in ${POD_IP_LIST} ${LOCAL_ENDPOINT_IP}; do
    ((EXPECT_NUM += 1))
    (
        echo "collecting information from ${ADDR}"
        REMOTE_RDMA_INFO=$(ssh  -p ${ENV_SSH_PORT} ${ADDR} " source /usr/sbin/rdmatools && GetLocalRdmaDeviceIP ")
        if [ -n "${REMOTE_RDMA_INFO}" ]; then
            echo "${REMOTE_RDMA_INFO}" >${REMOTE_INFOR_DIR}/${ADDR}
        else
            echo "error, failed to get rdma information from remote ${ADDR}"
        fi
    ) &
done
wait
NUM=$(ls ${REMOTE_INFOR_DIR} | wc -l)
((NUM == EXPECT_NUM)) || {
    echo "error, failed to get information from all hosts"
    exit 1
}
echo "finished collectiong information in ${REMOTE_INFOR_DIR}"


RunClient() {
    REMOTE_CLIENT="${1}"
    REMOTE_SERVER="${2}"
    REMOTE_CLIENT_NAME=$( GetNodeName ${REMOTE_CLIENT} )
    REMOTE_SERVER_NAME=$( GetNodeName ${REMOTE_SERVER} )


    [ -f "${REMOTE_INFOR_DIR}/${REMOTE_CLIENT}" ] || {
        echo "error, failed to find ${REMOTE_INFOR_DIR}/${REMOTE_CLIENT} "
        exit 1
    }
    [ -f "${REMOTE_INFOR_DIR}/${REMOTE_SERVER}" ] || {
        echo "error, failed to find ${REMOTE_INFOR_DIR}/${REMOTE_SERVER} "
        exit 1
    }
    RESULT_FILE="${RESULT_DIR}/${REMOTE_SERVER}"

    echo "" >>${RESULT_FILE}
    printf "________________________________________________________________________________________________________________________________________________\n" >>${RESULT_FILE}
    printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "from ${REMOTE_CLIENT} ${REMOTE_CLIENT_NAME}" "to ${REMOTE_SERVER} ${REMOTE_SERVER_NAME}" "BW avg[Gb/sec]" "MsgRate[Mpps]" "maxSpeed" "sameNetworkTrack" >>${RESULT_FILE}
    printf "_____________________________________________________________________________________________________________________________________________________\n" >>${RESULT_FILE}

    REMOTE_RUN_OUTPUT_DIR="${REMOTE_OUTPUT_DIR}/${REMOTE_SERVER}"
    mkdir -p ${REMOTE_RUN_OUTPUT_DIR}

    echo "-------------"
    cat ${REMOTE_INFOR_DIR}/${REMOTE_CLIENT}
    cat ${REMOTE_INFOR_DIR}/${REMOTE_SERVER}
    echo "-------------"

    # reset the port
    PORT=${START_PORT}
    while read LINE; do
            echo "=== SERVER LINE: ${LINE}"
        REMOTE_DEVICE=$(echo "${LINE}" | awk '{print $1}')
        REMOTE_INTERFACE=$(echo "${LINE}" | awk '{print $2}')
        REMOTE_IP=$(echo "${LINE}" | awk '{print $3}')
        REMOTE_MASK=$(echo "${LINE}" | awk '{print $4}')
        REMOTE_PROTOCOL=$(echo "${LINE}" | awk '{print $5}')
        REMOTE_INDEX=$(echo "${LINE}" | awk '{print $6}')
        [ -n "${REMOTE_DEVICE}" ] || continue 

        #OLD=$IFS
        #IFS=$'\n'
        while read CLIENT_LINE; do
            #IFS=$OLD
            echo "=== CLIENT_LINE: ${CLIENT_LINE}"
            LOCAL_DEVICE=$(echo "${CLIENT_LINE}" | awk '{print $1}')
            LOCAL_INTERFACE=$(echo "${CLIENT_LINE}" | awk '{print $2}')
            LOCAL_IP=$(echo "${CLIENT_LINE}" | awk '{print $3}')
            LOCAL_MASK=$(echo "${CLIENT_LINE}" | awk '{print $4}')
            LOCAL_PROTOCOL=$(echo "${CLIENT_LINE}" | awk '{print $5}')
            LOCAL_INDEX=$(echo "${CLIENT_LINE}" | awk '{print $6}')

            [ -n "${LOCAL_DEVICE}" ] || continue 

            SAME_NETWORK_TRACK="false"
            if [ "${REMOTE_MASK}"x == "${LOCAL_MASK}"x ] && [ -n "${LOCAL_MASK}" ]; then
                if CheckIPv4SameSubnet "${LOCAL_IP}" "${REMOTE_IP}" "${LOCAL_MASK}"; then
                    SAME_NETWORK_TRACK="true"
                fi 
            fi
            [ "${SAME_NETWORK_TRACK}"x == "true"x ] || continue

            echo ""
            echo "-------------------------------------------------------------------------------------------------"
            echo "${CURRENT_FILENAME} case: client node ${REMOTE_CLIENT}/${REMOTE_CLIENT_NAME} ( ${LOCAL_INTERFACE} ${LOCAL_DEVICE} ${LOCAL_IP} ) and the server ${REMOTE_SERVER}/${REMOTE_SERVER_NAME} ( ${REMOTE_INTERFACE} ${REMOTE_DEVICE} ${REMOTE_IP} )  "

            REMOTE_RUN_IP_OUTPUT_DIR="${REMOTE_RUN_OUTPUT_DIR}/${REMOTE_IP}"

            MAX_SPEED=$(ethtool ${LOCAL_INTERFACE} | grep Speed | awk '{print $2}')

            OPTIONS="-d ${LOCAL_DEVICE} -x ${LOCAL_INDEX} -p ${PORT} ${CMD_OPTIONS} ${REMOTE_IP}"
            echo "client on ${REMOTE_CLIENT}/${REMOTE_CLIENT}: ${CMD_CLI} ${OPTIONS}"
            if [ "${ASYNCHRONOUS}"x == "true"x ]; then
                (
                    { ssh  -p ${ENV_SSH_PORT} ${REMOTE_CLIENT} "${CMD_CLI} ${OPTIONS}" | tee ${REMOTE_RUN_IP_OUTPUT_DIR}; } || true
                    BANDWITDH=$(cat ${REMOTE_RUN_IP_OUTPUT_DIR} | grep -A 1 "BW average" | grep -E "[0-9\.]+" | awk '{print $4 }') || true
                    PPS=$(cat ${REMOTE_RUN_IP_OUTPUT_DIR} | grep -A 1 "BW average" | grep -E "[0-9\.]+" | awk '{print $5 }') || true
                    if [ -n "${BANDWITDH}" ]; then
                        printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "${LOCAL_INTERFACE}/${LOCAL_DEVICE}/${LOCAL_IP}" "${REMOTE_INTERFACE}/${REMOTE_DEVICE}/${REMOTE_IP}" "${BANDWITDH}" "${PPS}" "${MAX_SPEED} ${SAME_NETWORK_TRACK}" >>${RESULT_FILE}
                    else
                        echo "error, ${REMOTE_CLIENT}/${REMOTE_CLIENT_NAME}( ${LOCAL_INTERFACE} ${LOCAL_DEVICE} ${LOCAL_IP} ) failed to test server ${REMOTE_SERVER}/${REMOTE_SERVER_NAME} ( ${REMOTE_INTERFACE} ${REMOTE_DEVICE} ${REMOTE_IP} ${PORT} ) "
                        printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "${LOCAL_INTERFACE}/${LOCAL_DEVICE}/${LOCAL_IP}" "${REMOTE_INTERFACE}/${REMOTE_DEVICE}/${REMOTE_IP}" "0" "0" "${MAX_SPEED} ${SAME_NETWORK_TRACK}" >>${RESULT_FILE}
                    fi
                )&
            else
                { ssh  -p ${ENV_SSH_PORT} ${REMOTE_CLIENT} " ${CMD_CLI} ${OPTIONS}" | tee ${REMOTE_RUN_IP_OUTPUT_DIR}; } || true
                BANDWITDH=$(cat ${REMOTE_RUN_IP_OUTPUT_DIR} | grep -A 1 "BW average" | grep -E "[0-9\.]+" | awk '{print $4 }') || true
                PPS=$(cat ${REMOTE_RUN_IP_OUTPUT_DIR} | grep -A 1 "BW average" | grep -E "[0-9\.]+" | awk '{print $5 }') || true
                if [ -n "${BANDWITDH}" ]; then
                    printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "${LOCAL_INTERFACE}/${LOCAL_DEVICE}/${LOCAL_IP}" "${REMOTE_INTERFACE}/${REMOTE_DEVICE}/${REMOTE_IP}" "${BANDWITDH}" "${PPS}" "${MAX_SPEED} ${SAME_NETWORK_TRACK}" >>${RESULT_FILE}
                else
                    echo "error, ${REMOTE_CLIENT}/${REMOTE_CLIENT_NAME}( ${LOCAL_INTERFACE} ${LOCAL_DEVICE} ${LOCAL_IP} ) failed to test server ${REMOTE_SERVER}/${REMOTE_SERVER_NAME} ( ${REMOTE_INTERFACE} ${REMOTE_DEVICE} ${REMOTE_IP} ${PORT} ) "
                    printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "${LOCAL_INTERFACE}/${LOCAL_DEVICE}/${LOCAL_IP}" "${REMOTE_INTERFACE}/${REMOTE_DEVICE}/${REMOTE_IP}" "0" "0" "${MAX_SPEED} ${SAME_NETWORK_TRACK}" >>${RESULT_FILE}
                fi
            fi

        done <${REMOTE_INFOR_DIR}/${REMOTE_CLIENT}

        echo "======= next server device"
        (( PORT = PORT + 1))
    done <${REMOTE_INFOR_DIR}/${REMOTE_SERVER}

    printf "_____________________________________________________________________________________________________________________________________________________\n" >>${RESULT_FILE}

    echo "" >>${RESULT_FILE}
    echo ""

    wait

}

RunPerOnHost() {
    REMOTE_HOST="${1}"
    REMOTE_NODE_NAME=$( GetNodeName ${REMOTE_HOST} )

    [ -f "${REMOTE_INFOR_DIR}/${REMOTE_HOST}" ] || {
        echo "error, failed to find ${REMOTE_INFOR_DIR}/${REMOTE_HOST} "
        exit 1
    }
    PORT=${START_PORT}

    echo "clean all server on ${REMOTE_HOST}"
    ssh  -p ${ENV_SSH_PORT} ${REMOTE_HOST} " PID=\`ps aux | grep ${CMD_CLI} | grep -v grep | awk '{print \$2}' \` ; [ -n \"\${PID}\" ] && { echo \"\${PID}\" | xargs -n 1 -i  kill -9 {} ; } " || true

    while read LINE; do
        REMOTE_DEVICE=$(echo "${LINE}" | awk '{print $1}')
        REMOTE_INTERFACE=$(echo "${LINE}" | awk '{print $2}')
        REMOTE_IP=$(echo "${LINE}" | awk '{print $3}')
        REMOTE_MASK=$(echo "${LINE}" | awk '{print $4}')
        REMOTE_PROTOCOL=$(echo "${LINE}" | awk '{print $5}')
        REMOTE_INDEX=$(echo "${LINE}" | awk '{print $6}')

        [ -n "${REMOTE_DEVICE}" ] || continue 

        OPTIONS="-d ${REMOTE_DEVICE} -x ${REMOTE_INDEX} ${CMD_OPTIONS} "
        OPTIONS+=" -p ${PORT} "
        echo "server on remote ${REMOTE_HOST} for ${REMOTE_INTERFACE} with ${REMOTE_IP}: ${CMD_CLI} ${OPTIONS}"
        (
            ssh  -p ${ENV_SSH_PORT} ${REMOTE_HOST} "${CMD_CLI} ${OPTIONS} " || true
            #ssh  -p ${ENV_SSH_PORT} ${REMOTE_HOST} "${CMD_CLI} ${OPTIONS} " &>/dev/null
        )&

        ((PORT=PORT+1))

    done <${REMOTE_INFOR_DIR}/${REMOTE_HOST}

}


TestRdma() {
    rm -rf ${RESULT_DIR}/*

    ALL_HOST_LIST="${1}"

    echo " run pair test between: ${ALL_HOST_LIST}   "

    echo "------------------ run server on all devices of each node ------------------"
    for ADDR in ${ALL_HOST_LIST} ; do
       RunPerOnHost "${ADDR}"
    done
    echo ""
    sleep 2

    CLIENT_HOST=""
    SERVER_HOST=""
    CLIENT_NAME=""
    SERVER_NAME=""
    for ADDR in ${ALL_HOST_LIST} ; do
        if [ -z "${CLIENT_HOST}" ] ; then
            CLIENT_HOST="${ADDR}"
            CLIENT_NAME=$( GetNodeName ${CLIENT_HOST} )
            continue
        fi
        if [ -z "${SERVER_HOST}" ] ; then
            SERVER_HOST="${ADDR}"
            SERVER_NAME=$( GetNodeName ${SERVER_HOST} )
        fi
        echo "------------------ test communication from ${CLIENT_HOST}/${CLIENT_NAME} to ${SERVER_HOST}/${SERVER_NAME} ------------------"
        ( RunClient "${CLIENT_HOST}" "${SERVER_HOST}" )&
        CLIENT_HOST=""
        SERVER_HOST=""
        CLIENT_NAME=""
        SERVER_NAME=""
    done
    echo ""
    wait 


    echo ""
    echo "------------------ ${CURRENT_FILENAME} summary -------------------------"
    echo ""
    FILE_LIST=$(ls ${RESULT_DIR})
    for FILE_NAME in ${FILE_LIST}; do
        cat ${RESULT_DIR}/${FILE_NAME}
        echo ""
    done

    sleep 5

}

#-------------------------
DURATION=${DURATION:-"10"}
LOOP_TIMES=${LOOP_TIMES:-"1"}
START_PORT=${START_PORT:-"10001"}
# run all RDMA client asynchronously for each rdma device and each node
ASYNCHRONOUS=${ASYNCHRONOUS:-"true"}


BW_CMD_CLI=${BW_CMD_CLI:-"ib_write_bw"}
BW_CMD_OPTIONS=${BW_CMD_OPTIONS:-"--disable_pcie_relaxed --duration ${DURATION} --report_gbits -F -q 4 "}
CMD_CLI="${BW_CMD_CLI}"
CMD_OPTIONS="${BW_CMD_OPTIONS}"

echo "run ${LOOP_TIMES} times with duration ${DURATION} of ${LOOP_TIMES} round, asynchronously is ${ASYNCHRONOUS}"
for ((i=1;i<=${LOOP_TIMES};i++)); do
    echo "===================================== round ${i} ===================================="

    # run test on the same network track in sequential order
    TestRdma "${POD_IP_LIST} ${LOCAL_IP}"

    # run test on the same network track in reverse order
    # 把 ${LOCAL_IP} 放到前面，${POD_IP_LIST} 放到后面，这样，当是奇数个节点时，避免有主机覆盖不到测试
    TestRdma "${LOCAL_IP} ${POD_IP_LIST} "


    echo ""
done

