#!/bin/bash

# Copyright 2024 Authors of spidernet-io
# SPDX-License-Identifier: Apache-2.0


:<<EOF
脚本把 所有的主机，进行 两两 分组， 然后 并发的在 每一组主机之间 进行 正向和 反向的 同轨 RDMA 网卡 打流 
    ASYNCHRONOUS=true           在每两个主机之间，是让 8 个网卡并发的同时打流，还是一个一个网卡顺序的打 （默认，顺序的打流）
    SAME_NETWORK_TRACK=true     是 让同轨网卡打流，还是跨轨 （默认，同轨打 ）
    LOOP_TIMES                  重复打几轮（默认1轮）
    DATA_SIZE                   打流数据包大小（默认65536）

    ENABLE_RDMA_QOS             是否启用 rdma cm
    RDMA_QOS                    rdma cm 的 tos



test all endpoints :
    DURATION=30  testRdmaPair

test between specific endpoints:
    DURATION=10 LOOP_TIMES=1 ASYNCHRONOUS=true  DATA_SIZE=2000  testRdmaPair  "10.233.94.236  10.233.116.235 10.233.101.251"

exclude endpoints:
    EXCLUDE_ENDPOINT="10.0.0.10 10.0.0.2" DURATION=10 LOOP_TIMES=1 ASYNCHRONOUS=false  testRdmaPair  

rdma cm:
    DURATION=5 ENABLE_RDMA_QOS=true RDMA_QOS=160 testRdmaPair

EOF


#set -x
#set -o pipefail
set -o errexit
set -o nounset

if ! which ib_write_bw &>/dev/null; then
    echo "error, ib_write_bw tools not found"
    exit 1
fi

CURRENT_FILENAME=$(basename $0)
ENV_SSH_PORT=${ENV_SSH_PORT:-"2022"}
EXCLUDE_ENDPOINT=${EXCLUDE_ENDPOINT:-""}

BIDIRECTION=${BIDIRECTION:-"false"}

source /usr/sbin/rdmatools
source getAllEndpoints
LOCAL_INT=$( ip r | grep default | head -1 | grep -oE "dev [^[:space:]]+"  | awk '{print $2}' )
LOCAL_ENDPOINT_IP=$( ip -4 addr show ${LOCAL_INT} | grep -oP '(?<=inet\s)[0-9]+(\.[0-9]+){3}'	 )


POD_IP_LIST=${1:-""}
if [ -z "${POD_IP_LIST}" ] ;then 
    POD_IP_LIST=$(getOtherEndpoints 2>/dev/null) || true
    POD_IP_LIST=$( echo "${POD_IP_LIST}" && echo "${LOCAL_ENDPOINT_IP}" )
    POD_IP_LIST=$( echo "${POD_IP_LIST}" | sort )
else 
    POD_IP_LIST=$( echo "${POD_IP_LIST}"  | tr -s " " |  tr ' ' '\n' | tr -s '\n' )
    POD_IP_LIST=$( echo "${POD_IP_LIST}" | sort )
fi

if [ -n "${EXCLUDE_ENDPOINT}" ]; then
    echo ""
    TMP_LIST=""
    for ADDR in ${POD_IP_LIST} ; do
        ! grep " ${ADDR} " <<< " ${EXCLUDE_ENDPOINT} " &>/dev/null || { echo "exclude ${ADDR}" && continue ; }
        TMP_LIST=$( echo "$TMP_LIST" && echo ${ADDR} )
    done
    POD_IP_LIST="${TMP_LIST}"
fi

echo ""
echo "POD_IP_LIST: ${POD_IP_LIST}"
echo ""
[ -n "${POD_IP_LIST}" ] || {
    echo "error, no remote hosts "
    exit 1
}

TEST_POD_NUMBER=$( echo "${POD_IP_LIST}" | wc -l )
if (( TEST_POD_NUMBER % 2 == 1 )) ; then
    echo "error, pod number ${TEST_POD_NUMBER} must be even"
    exit 1
fi

DEFAULT_LOCAL_INT=$( ip r | grep default | grep -Eo "dev .*" | awk '{print $2}' )
LOCAL_IP=$( ip -4 addr show ${DEFAULT_LOCAL_INT} | grep -oP '(?<=inet\s)[0-9]+(\.[0-9]+){3}' | head -1 )

WORKDIR="/tmp/${CURRENT_FILENAME}-$(date +%Y%m%d%H%M%S%N)"
REMOTE_INFOR_DIR="${WORKDIR}/remoteip"
REMOTE_OUTPUT_DIR="${WORKDIR}/output"
TASK_FINISH_DIR="${WORKDIR}/ready"
STATISTIC_DIR="${WORKDIR}/statistic"
RESULT_DIR="${WORKDIR}/result"
mkdir -p ${WORKDIR}
mkdir -p ${REMOTE_INFOR_DIR}
mkdir -p ${RESULT_DIR}
rm -rf ${RESULT_DIR}/*
mkdir -p ${REMOTE_OUTPUT_DIR}
mkdir -p ${TASK_FINISH_DIR}
mkdir -p ${STATISTIC_DIR}

echo "============== WORKDIR directory: ${WORKDIR} ===================="

echo "collecting local information ..."
LOCAL_RDMA_INFO=$(GetLocalRdmaDeviceIP)
[ -n "${LOCAL_RDMA_INFO}" ] || {
    echo "error, failed to get local rdma information"
    exit 1
}

echo "collecting remote information ..."
EXPECT_NUM=0
for ADDR in ${POD_IP_LIST}; do
    ((EXPECT_NUM += 1))
    (
        echo "collecting information from ${ADDR}"
        REMOTE_RDMA_INFO=$(ssh  -p ${ENV_SSH_PORT} ${ADDR} " source /usr/sbin/rdmatools && GetLocalRdmaDeviceIP ")
        if [ -n "${REMOTE_RDMA_INFO}" ]; then
            echo "${REMOTE_RDMA_INFO}" >${REMOTE_INFOR_DIR}/${ADDR}
        else
            echo "error, failed to get rdma information from remote ${ADDR}"
        fi
    ) &
done
wait
NUM=$(ls ${REMOTE_INFOR_DIR} | wc -l)
((NUM == EXPECT_NUM)) || {
    echo "error, failed to get information from all hosts"
    exit 1
}
echo "finished collectiong information in ${REMOTE_INFOR_DIR}"


RunClient() {
    REMOTE_CLIENT="${1}"
    REMOTE_SERVER="${2}"
    TASK_ROUND_ID="${3}"
    REMOTE_CLIENT_NAME=$( GetNodeName ${REMOTE_CLIENT} )
    REMOTE_SERVER_NAME=$( GetNodeName ${REMOTE_SERVER} )


    [ -f "${REMOTE_INFOR_DIR}/${REMOTE_CLIENT}" ] || {
        echo "error, failed to find ${REMOTE_INFOR_DIR}/${REMOTE_CLIENT} "
        exit 1
    }
    [ -f "${REMOTE_INFOR_DIR}/${REMOTE_SERVER}" ] || {
        echo "error, failed to find ${REMOTE_INFOR_DIR}/${REMOTE_SERVER} "
        exit 1
    }
    RESULT_FILE="${RESULT_DIR}/round-${TASK_ROUND_ID}-${REMOTE_CLIENT}-to-${REMOTE_SERVER}"

    echo "" >>${RESULT_FILE}
    printf "________________________________________________________________________________________________________________________________________________\n" >>${RESULT_FILE}
    printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "from ${REMOTE_CLIENT} ${REMOTE_CLIENT_NAME}" "to ${REMOTE_SERVER} ${REMOTE_SERVER_NAME}" "BW avg[Gb/sec]" "MsgRate[Mpps]" "maxSpeed" "sameNetworkTrack" >>${RESULT_FILE}
    printf "_____________________________________________________________________________________________________________________________________________________\n" >>${RESULT_FILE}

    REMOTE_RUN_OUTPUT_DIR="${REMOTE_OUTPUT_DIR}/${REMOTE_SERVER}"
    mkdir -p ${REMOTE_RUN_OUTPUT_DIR}

    TASK_FINISH_SUBDIR="${TASK_FINISH_DIR}/${REMOTE_CLIENT}-to-${REMOTE_SERVER}"
    mkdir -p ${TASK_FINISH_SUBDIR} || true 
    rm -rf ${TASK_FINISH_SUBDIR}/*

    echo "-------------"
    cat ${REMOTE_INFOR_DIR}/${REMOTE_CLIENT}
    cat ${REMOTE_INFOR_DIR}/${REMOTE_SERVER}
    echo "-------------"

    # reset the port
    PORT=${START_PORT}
    TASK_COUNTER=0

    # 将文件内容读取到数组中，避免在循环中执行SSH命令时stdin被重定向
    mapfile -t SERVER_LINES < ${REMOTE_INFOR_DIR}/${REMOTE_SERVER}
    # 将文件内容读取到数组中，避免在循环中执行SSH命令时stdin被重定向
    mapfile -t CLIENT_LINES < ${REMOTE_INFOR_DIR}/${REMOTE_CLIENT}

    # 使用数组迭代而不是while read
    for SERVER_LINE in "${SERVER_LINES[@]}"; do

        REMOTE_DEVICE=$(echo "${SERVER_LINE}" | awk '{print $1}')
        REMOTE_INTERFACE=$(echo "${SERVER_LINE}" | awk '{print $2}')
        REMOTE_IP=$(echo "${SERVER_LINE}" | awk '{print $3}')
        REMOTE_MASK=$(echo "${SERVER_LINE}" | awk '{print $4}')
        REMOTE_PROTOCOL=$(echo "${SERVER_LINE}" | awk '{print $5}')
        REMOTE_INDEX=$(echo "${SERVER_LINE}" | awk '{print $6}')
        [ -n "${REMOTE_DEVICE}" ] || continue 

        # echo "REMOTE_DEVICE=${REMOTE_DEVICE}  REMOTE_INTERFACE=${REMOTE_INTERFACE}  REMOTE_IP=${REMOTE_IP}  REMOTE_MASK=${REMOTE_MASK} REMOTE_PROTOCOL=${REMOTE_PROTOCOL} REMOTE_INDEX=${REMOTE_INDEX}" 
        # REMOTE_DEVICE=mlx5_16  REMOTE_INTERFACE=net4  REMOTE_IP=172.17.4.58  REMOTE_MASK=24 REMOTE_PROTOCOL=RoceV2 REMOTE_INDEX=3

        for CLIENT_LINE in "${CLIENT_LINES[@]}"; do
            #IFS=$OLD
            echo "* CLIENT_LINE: ${CLIENT_LINE}"
            LOCAL_DEVICE=$(echo "${CLIENT_LINE}" | awk '{print $1}')
            LOCAL_INTERFACE=$(echo "${CLIENT_LINE}" | awk '{print $2}')
            LOCAL_IP=$(echo "${CLIENT_LINE}" | awk '{print $3}')
            LOCAL_MASK=$(echo "${CLIENT_LINE}" | awk '{print $4}')
            LOCAL_PROTOCOL=$(echo "${CLIENT_LINE}" | awk '{print $5}')
            LOCAL_INDEX=$(echo "${CLIENT_LINE}" | awk '{print $6}')

            [ -n "${LOCAL_DEVICE}" ] || continue 

            SAME_TRACK="false"
            if [ "${REMOTE_MASK}"x == "${LOCAL_MASK}"x ] && [ -n "${LOCAL_MASK}" ]; then
                if CheckIPv4SameSubnet "${LOCAL_IP}" "${REMOTE_IP}" "${LOCAL_MASK}"; then
                    SAME_TRACK="true"
                fi 
            fi
            
            if [ "${SAME_NETWORK_TRACK}" == "true" ] ; then
                [ "${SAME_TRACK}"x == "true"x ] || continue
            else
                [ "${SAME_TRACK}"x == "false"x ] || continue
            fi 

            REMOTE_RUN_IP_OUTPUT_DIR="${REMOTE_RUN_OUTPUT_DIR}/${REMOTE_CLIENT}-${LOCAL_INTERFACE}-to-${REMOTE_SERVER}-${REMOTE_INTERFACE}"

            (( TASK_COUNTER = TASK_COUNTER + 1 ))
            echo ""
            echo "--------------- start case ${TASK_COUNTER}: client ${REMOTE_CLIENT_NAME}/${REMOTE_CLIENT} ( ${LOCAL_INTERFACE} ${LOCAL_DEVICE} ${LOCAL_IP} )  ===>   server ${REMOTE_SERVER_NAME}/${REMOTE_SERVER} ( ${REMOTE_INTERFACE} ${REMOTE_DEVICE} ${REMOTE_IP} )  --------------------- "

            MAX_SPEED=$(ethtool ${LOCAL_INTERFACE} | grep Speed | awk '{print $2}')

            OPTIONS="-d ${LOCAL_DEVICE} -x ${LOCAL_INDEX} -p ${PORT} ${CMD_OPTIONS} ${REMOTE_IP}"
            echo "client on ${REMOTE_CLIENT}/${REMOTE_CLIENT}: ${CMD_CLI} ${OPTIONS}"
            if [ "${ASYNCHRONOUS}"x == "true"x ]; then
                (
                    #{ ssh  -p ${ENV_SSH_PORT} ${REMOTE_CLIENT} "${CMD_CLI} ${OPTIONS}" | tee ${REMOTE_RUN_IP_OUTPUT_DIR}; } || true
                    { ssh  -p ${ENV_SSH_PORT} ${REMOTE_CLIENT} "${CMD_CLI} ${OPTIONS}" > ${REMOTE_RUN_IP_OUTPUT_DIR}; } || true
                    BANDWITDH=$(cat ${REMOTE_RUN_IP_OUTPUT_DIR} | grep -A 1 "BW average" | grep -E "[0-9\.]+" | awk '{print $4 }') || true
                    PPS=$(cat ${REMOTE_RUN_IP_OUTPUT_DIR} | grep -A 1 "BW average" | grep -E "[0-9\.]+" | awk '{print $5 }') || true
                    if [ -n "${BANDWITDH}" ]; then
                        printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "${LOCAL_INTERFACE}/${LOCAL_DEVICE}/${LOCAL_IP}" "${REMOTE_INTERFACE}/${REMOTE_DEVICE}/${REMOTE_IP}" "${BANDWITDH}" "${PPS}" "${MAX_SPEED} ${SAME_TRACK}" >>${RESULT_FILE}
                    else
                        echo "error, ${REMOTE_CLIENT}/${REMOTE_CLIENT_NAME}( ${LOCAL_INTERFACE} ${LOCAL_DEVICE} ${LOCAL_IP} ) failed to test server ${REMOTE_SERVER}/${REMOTE_SERVER_NAME} ( ${REMOTE_INTERFACE} ${REMOTE_DEVICE} ${REMOTE_IP} ${PORT} ) "
                        printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "${LOCAL_INTERFACE}/${LOCAL_DEVICE}/${LOCAL_IP}" "${REMOTE_INTERFACE}/${REMOTE_DEVICE}/${REMOTE_IP}" "0" "0" "${MAX_SPEED} ${SAME_TRACK}" >>${RESULT_FILE}
                    fi
                    touch ${TASK_FINISH_SUBDIR}/${REMOTE_CLIENT}-${LOCAL_INTERFACE}-to-${REMOTE_SERVER}-${REMOTE_INTERFACE}
                    echo "--------------- finish case ${TASK_COUNTER}: client ${REMOTE_CLIENT_NAME}/${REMOTE_CLIENT} ( ${LOCAL_INTERFACE} ${LOCAL_DEVICE} ${LOCAL_IP} )  ===>   server ${REMOTE_SERVER_NAME}/${REMOTE_SERVER} ( ${REMOTE_INTERFACE} ${REMOTE_DEVICE} ${REMOTE_IP} )  --------------------- "
                )&
            else
                #{ ssh  -p ${ENV_SSH_PORT} ${REMOTE_CLIENT} " ${CMD_CLI} ${OPTIONS}" | tee ${REMOTE_RUN_IP_OUTPUT_DIR}; } || true
                { ssh  -p ${ENV_SSH_PORT} ${REMOTE_CLIENT} " ${CMD_CLI} ${OPTIONS}" > ${REMOTE_RUN_IP_OUTPUT_DIR}; } || true
                BANDWITDH=$(cat ${REMOTE_RUN_IP_OUTPUT_DIR} | grep -A 1 "BW average" | grep -E "[0-9\.]+" | awk '{print $4 }') || true
                PPS=$(cat ${REMOTE_RUN_IP_OUTPUT_DIR} | grep -A 1 "BW average" | grep -E "[0-9\.]+" | awk '{print $5 }') || true
                if [ -n "${BANDWITDH}" ]; then
                    printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "${LOCAL_INTERFACE}/${LOCAL_DEVICE}/${LOCAL_IP}" "${REMOTE_INTERFACE}/${REMOTE_DEVICE}/${REMOTE_IP}" "${BANDWITDH}" "${PPS}" "${MAX_SPEED} ${SAME_TRACK}" >>${RESULT_FILE}
                else
                    echo "error, ${REMOTE_CLIENT}/${REMOTE_CLIENT_NAME}( ${LOCAL_INTERFACE} ${LOCAL_DEVICE} ${LOCAL_IP} ) failed to test server ${REMOTE_SERVER}/${REMOTE_SERVER_NAME} ( ${REMOTE_INTERFACE} ${REMOTE_DEVICE} ${REMOTE_IP} ${PORT} ) "
                    printf "%-40s\t%-40s\t%-20s%-20s%-20s%-20s\n" "${LOCAL_INTERFACE}/${LOCAL_DEVICE}/${LOCAL_IP}" "${REMOTE_INTERFACE}/${REMOTE_DEVICE}/${REMOTE_IP}" "0" "0" "${MAX_SPEED} ${SAME_TRACK}" >>${RESULT_FILE}
                fi
                touch ${TASK_FINISH_SUBDIR}/${REMOTE_CLIENT}-${LOCAL_INTERFACE}-to-${REMOTE_SERVER}-${REMOTE_INTERFACE}
                echo "--------------- finish case ${TASK_COUNTER}: client ${REMOTE_CLIENT_NAME}/${REMOTE_CLIENT} ( ${LOCAL_INTERFACE} ${LOCAL_DEVICE} ${LOCAL_IP} )  ===>   server ${REMOTE_SERVER_NAME}/${REMOTE_SERVER} ( ${REMOTE_INTERFACE} ${REMOTE_DEVICE} ${REMOTE_IP} )  --------------------- "
            fi
            echo ""

        done
        (( PORT = PORT + 1))

        # wait the remote server to restart
        sleep 1
    done

    printf "_____________________________________________________________________________________________________________________________________________________\n" >>${RESULT_FILE}

    echo "" >>${RESULT_FILE}
    echo ""


    while true ; do
        TASK_FINISH_NUM=$( ls ${TASK_FINISH_SUBDIR} | wc -l )
        if ((TASK_FINISH_NUM == TASK_COUNTER )) ; then 
            break
        else 
            #echo "waiting for tasks between client ${REMOTE_CLIENT} and server ${REMOTE_SERVER} on ${TASK_FINISH_SUBDIR} ... expected ${TASK_COUNTER}, current ${TASK_FINISH_NUM} "
            sleep 2
        fi
    done
    rm -rf ${TASK_FINISH_SUBDIR}/*

}

RunPerOnHost() {
    REMOTE_HOST="${1}"
    REMOTE_NODE_NAME=$( GetNodeName ${REMOTE_HOST} )

    [ -f "${REMOTE_INFOR_DIR}/${REMOTE_HOST}" ] || {
        echo "error, failed to find ${REMOTE_INFOR_DIR}/${REMOTE_HOST} "
        exit 1
    }
    PORT=${START_PORT}
    echo "clean all server on ${REMOTE_HOST}"
    #ssh  -p ${ENV_SSH_PORT} ${REMOTE_HOST} "killall -9 ${CMD_CLI}" || true
    ssh  -p ${ENV_SSH_PORT} ${REMOTE_HOST} "stopServerAlways ${CMD_CLI}" || true
    sleep 2

    # 将文件内容读取到数组中，避免在循环中执行SSH命令时stdin被重定向
    mapfile -t REMOTE_LINES < ${REMOTE_INFOR_DIR}/${REMOTE_HOST}
    for LINE in "${REMOTE_LINES[@]}"; do
        REMOTE_DEVICE=$(echo "${LINE}" | awk '{print $1}')
        REMOTE_INTERFACE=$(echo "${LINE}" | awk '{print $2}')
        REMOTE_IP=$(echo "${LINE}" | awk '{print $3}')
        REMOTE_MASK=$(echo "${LINE}" | awk '{print $4}')
        REMOTE_PROTOCOL=$(echo "${LINE}" | awk '{print $5}')
        REMOTE_INDEX=$(echo "${LINE}" | awk '{print $6}')

        [ -n "${REMOTE_DEVICE}" ] || continue 

        OPTIONS="-d ${REMOTE_DEVICE} -x ${REMOTE_INDEX} ${CMD_OPTIONS} "
        OPTIONS+=" -p ${PORT} "
        echo "server on remote ${REMOTE_HOST} for ${REMOTE_INTERFACE} with ${REMOTE_IP}: ${CMD_CLI} ${OPTIONS}"
        (
            #ssh  -p ${ENV_SSH_PORT} ${REMOTE_HOST} "${CMD_CLI} ${OPTIONS} " >/dev/null || true
            ssh  -p ${ENV_SSH_PORT} ${REMOTE_HOST} "runServerAlways '${CMD_CLI} ${OPTIONS}' " >/dev/null || true
        )&

        ((PORT=PORT+1))

    done

}

StopAllServer(){

    for ADDR in ${ALL_HOST_LIST} ; do
        echo "clean all server on ${ADDR}"
        #ssh  -p ${ENV_SSH_PORT} ${REMOTE_HOST} "killall -9 ${CMD_CLI}" || true
        ssh  -p ${ENV_SSH_PORT} ${ADDR} "stopServerAlways ${CMD_CLI}" || true
    done
    sleep 2
}

TestRdma() {

    ALL_HOST_LIST="${1}"
    ROUND_ID="${2}"

    echo " run pair test between: ${ALL_HOST_LIST}   "

    echo "step1: run server on all devices of each node "
    for ADDR in ${ALL_HOST_LIST} ; do
       RunPerOnHost "${ADDR}"
    done
    echo ""
    sleep 2

    CLIENT_HOST=""
    SERVER_HOST=""
    CLIENT_NAME=""
    SERVER_NAME=""
    echo 
    ROUND_TASK_READY_DIR="${TASK_FINISH_DIR}/round-${ROUND_COUNTER}-id-${ROUND_ID}"
    rm -rf ${ROUND_TASK_READY_DIR}
    mkdir -p ${ROUND_TASK_READY_DIR}

    echo "step2: run client  "
    ROUND_TASK_COUNTER=0
    for ADDR in ${ALL_HOST_LIST} ; do
        if [ -z "${CLIENT_HOST}" ] ; then
            CLIENT_HOST="${ADDR}"
            CLIENT_NAME=$( GetNodeName ${CLIENT_HOST} )
            continue
        fi
        if [ -z "${SERVER_HOST}" ] ; then
            SERVER_HOST="${ADDR}"
            SERVER_NAME=$( GetNodeName ${SERVER_HOST} )
        fi
        echo ""
        (( ROUND_TASK_COUNTER = ROUND_TASK_COUNTER + 1 ))
        #echo "------------------ run client  ${CLIENT_HOST}/${CLIENT_NAME} ===>>  server ${SERVER_HOST}/${SERVER_NAME} ------------------"
        ( 
            RunClient "${CLIENT_HOST}" "${SERVER_HOST}" "${ROUND_TASK_COUNTER}"
            touch ${ROUND_TASK_READY_DIR}/${CLIENT_NAME}-${SERVER_NAME}
        )&
        CLIENT_HOST=""
        SERVER_HOST=""
        CLIENT_NAME=""
        SERVER_NAME=""
    done


    echo "wait for all tests finish"
    while true ; do
        ROUND_TASK_FINISH_NUM=$( ls ${ROUND_TASK_READY_DIR} | wc -l )
        if ((ROUND_TASK_FINISH_NUM == ROUND_TASK_COUNTER )) ; then 
            break
        else 
            echo "waiting for round ${ROUND_ID} tasks finish ... expected ${ROUND_TASK_COUNTER}, current ${ROUND_TASK_FINISH_NUM} "
            sleep 2
        fi
    done
    rm -rf ${ROUND_TASK_READY_DIR}/*


    echo ""
    echo "------------------ ${CURRENT_FILENAME} summary from ${RESULT_DIR}-------------------------"
    echo ""
    FILE_LIST=$(ls ${RESULT_DIR})
    for FILE_NAME in ${FILE_LIST}; do
        cat ${RESULT_DIR}/${FILE_NAME}
        echo ""
    done

    sleep 5

}

RecordRDMAStatistic(){
    filename="$1"

    for POD in ${POD_IP_LIST} ; do
        mkdir -p ${STATISTIC_DIR}/${POD} || true
        echo ""
        echo "=========================== show rdma statistic on pod  ${POD}==========================="
        { ssh  -p ${ENV_SSH_PORT} ${POD} "rdma statistic" > ${STATISTIC_DIR}/${POD}/${filename}; } || true
        cat ${STATISTIC_DIR}/${POD}/${filename}
    done
    echo ""

}

RDMAStatisticSummary(){

    for POD in ${POD_IP_LIST} ; do
        printf "_____________________________________________________________________________________________________________________________________________\n" 
        printf "rdma statistic on pod ${POD}\n" 
        printf "%-30s\t%-30s\t%-30s\t%-30s\t%-30s\n" "deviceName" "result" "out_of_sequence before/after" "out_of_buffer before/after" "cnp_sent before/after"
        printf "_____________________________________________________________________________________________________________________________________________\n"

        while read line; do
            DEVICE_NAME=$( grep -oE "link [^[:space:]]+" <<< "${line}" | awk '{print $2}' )
            NEW_LINE=$( grep "link ${DEVICE_NAME} " ${STATISTIC_DIR}/${POD}/new )
            if [ -z "${NEW_LINE}" ] ; then
                echo "error! failed to find information of ${DEVICE_NAME} in new file"
                continue
            fi

            OLD_OUT_OF_SEQUENCE=$( grep -Eo " out_of_sequence [0-9]+ " <<< "${line}" | awk '{print $2}' )
            NEW_OUT_OF_SEQUENCE=$( grep -Eo " out_of_sequence [0-9]+ " <<< "${NEW_LINE}" | awk '{print $2}' )

            # it only exists in PF    
            OLD_CNP_SENT=$( grep -Eo " np_cnp_sent [0-9]+ " <<< "${line}" | awk '{print $2}' ) || true
            NEW_CNP_SENT=$( grep -Eo " np_cnp_sent [0-9]+ " <<< "${NEW_LINE}" | awk '{print $2}' ) || true

            OLD_OUT_OF_BUFFER=$( grep -Eo " out_of_buffer [0-9]+ " <<< "${line}" | awk '{print $2}' )
            NEW_OUT_OF_BUFFER=$( grep -Eo " out_of_buffer [0-9]+ " <<< "${NEW_LINE}" | awk '{print $2}' )

            if [ -z "${OLD_OUT_OF_SEQUENCE}" ] || [ -z "${NEW_OUT_OF_SEQUENCE}" ] ; then
                echo "error! failed to get out_of_sequence from line: ${line}"
                continue
            fi

            FLAG="ok"
            if (( OLD_OUT_OF_SEQUENCE != NEW_OUT_OF_SEQUENCE )) ; then
                FLAG="fail"
            fi
            if (( OLD_OUT_OF_BUFFER != NEW_OUT_OF_BUFFER )) ; then
                FLAG="fail"
            fi

            printf "%-30s\t%-30s\t%-30s\t%-30s\t%-30s\n" "${DEVICE_NAME}" "${FLAG}" "${OLD_OUT_OF_SEQUENCE}/${NEW_OUT_OF_SEQUENCE}" "${OLD_OUT_OF_BUFFER}/${NEW_OUT_OF_BUFFER}" "${OLD_CNP_SENT}/${NEW_CNP_SENT}"

        done < ${STATISTIC_DIR}/${POD}/old
        printf "_____________________________________________________________________________________________________________________________________________\n"
        echo ""
    done

}

#-------------------------
DURATION=${DURATION:-"60"}
LOOP_TIMES=${LOOP_TIMES:-"1"}
START_PORT=${START_PORT:-"10000"}
# run all RDMA client asynchronously for each rdma device and each node
ASYNCHRONOUS=${ASYNCHRONOUS:-"false"}
SAME_NETWORK_TRACK=${SAME_NETWORK_TRACK:-"true"}

DATA_SIZE=${DATA_SIZE:-"65536"}

RDMA_QOS=${RDMA_QOS:-""}
BW_CMD_CLI=${BW_CMD_CLI:-"ib_write_bw"}
ENABLE_RDMA_QOS=${ENABLE_RDMA_QOS:-""}
BW_CMD_OPTIONS=${BW_CMD_OPTIONS:-"--disable_pcie_relaxed --duration ${DURATION} --size=${DATA_SIZE} --report_gbits -F -q 4 "}
[ "${ENABLE_RDMA_QOS}" != "true" ] || BW_CMD_OPTIONS="${BW_CMD_OPTIONS} --rdma_cm"
[ -z "${RDMA_QOS}" ] || BW_CMD_OPTIONS="${BW_CMD_OPTIONS} --tos ${RDMA_QOS}"
CMD_CLI="${BW_CMD_CLI}"
CMD_OPTIONS="${BW_CMD_OPTIONS}"

echo "run ${LOOP_TIMES} times with duration ${DURATION} of ${LOOP_TIMES} round, asynchronously is ${ASYNCHRONOUS}"


RecordRDMAStatistic "old"

for ((ROUND_COUNTER=1;ROUND_COUNTER<=${LOOP_TIMES};ROUND_COUNTER++)); do
    echo "===================================== round ${ROUND_COUNTER} : sequential order test ===================================="

    # run test on the same network track in sequential order
    echo "run test on sequence order: $( echo "${POD_IP_LIST}" | tr '\n' ' ' )"
    #echo "${POD_IP_LIST}"
    TestRdma "${POD_IP_LIST}" "1"

    echo "===================================== round ${ROUND_COUNTER} : reverse order test ===================================="
    # reverse the stream 
    REVERSE_LIST=$( echo "${POD_IP_LIST}" | sort -r )
    echo "run test on reverse order: $( echo "${REVERSE_LIST}" | tr '\n' ' ' )"
    #echo "${REVERSE_LIST}"
    TestRdma "${REVERSE_LIST}" "2"

    echo ""
done

RecordRDMAStatistic "new"
StopAllServer

echo ""
echo ""
echo "========================================== summary bandwidth report ============================================================="
echo ""
echo "------------------ ${CURRENT_FILENAME} summary from ${RESULT_DIR}-------------------------"
echo ""
FILE_LIST=$(ls ${RESULT_DIR})
for FILE_NAME in ${FILE_LIST}; do
    cat ${RESULT_DIR}/${FILE_NAME}
    echo ""
done

echo ""
echo ""
echo "========================================== summary about out of sequence  ============================================================="
echo ""
RDMAStatisticSummary

