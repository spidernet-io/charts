name: Pull and Push Image

env:
  ONLINE_REGISTER: ghcr.io
  ONLINE_REGISTER_USER: ${{ github.actor }}
  ONLINE_REGISTER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

on:
  workflow_dispatch:
    inputs:
      source_image:
        description: 'Source image to pull (e.g., docker.io/mellanox/tcpdump-rdma)'
        required: true
        type: string

permissions: write-all

jobs:
  pull-and-push:
    timeout-minutes: 30
    environment: release-base-images
    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3.0.0

      - name: Parse image information
        run: |
          echo "Processing source image: ${{ github.event.inputs.source_image }}"
          
          # Extract image name without registry and tag
          if [[ "${{ github.event.inputs.source_image }}" == *":"* ]]; then
            # Image has a tag
            SOURCE_IMAGE_NAME=$(echo "${{ github.event.inputs.source_image }}" | cut -d':' -f1)
            SOURCE_IMAGE_TAG=$(echo "${{ github.event.inputs.source_image }}" | cut -d':' -f2)
          else
            # No tag specified, use 'latest'
            SOURCE_IMAGE_NAME="${{ github.event.inputs.source_image }}"
            SOURCE_IMAGE_TAG="latest"
          fi
          
          # Extract the image name without registry prefix
          if [[ "${SOURCE_IMAGE_NAME}" == *"/"* ]]; then
            # Remove registry prefix if exists
            IMAGE_SUFFIX=$(echo "${SOURCE_IMAGE_NAME}" | grep -o '[^/]*$')
          else
            # No registry prefix
            IMAGE_SUFFIX="${SOURCE_IMAGE_NAME}"
          fi
          
          # Set target image name with ghcr.io/spidernet-io prefix
          TARGET_IMAGE_NAME="ghcr.io/spidernet-io/${IMAGE_SUFFIX}"
          
          echo "SOURCE_IMAGE_NAME=${SOURCE_IMAGE_NAME}" >> $GITHUB_ENV
          echo "SOURCE_IMAGE_TAG=${SOURCE_IMAGE_TAG}" >> $GITHUB_ENV
          echo "TARGET_IMAGE_NAME=${TARGET_IMAGE_NAME}" >> $GITHUB_ENV
          echo "TARGET_IMAGE_TAG=${SOURCE_IMAGE_TAG}" >> $GITHUB_ENV
          
          echo "Source image: ${SOURCE_IMAGE_NAME}:${SOURCE_IMAGE_TAG}"
          echo "Target image: ${TARGET_IMAGE_NAME}:${TARGET_IMAGE_TAG}"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ env.ONLINE_REGISTER_USER }}
          password: ${{ env.ONLINE_REGISTER_PASSWORD }}
          registry: ${{ env.ONLINE_REGISTER }}

      - name: Pull source image
        run: |
          docker pull ${{ github.event.inputs.source_image }}
          
          # Tag the image with the target name
          docker tag ${{ github.event.inputs.source_image }} ${{ env.TARGET_IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
          
          # Also tag as latest if not already latest
          if [ "${{ env.TARGET_IMAGE_TAG }}" != "latest" ]; then
            docker tag ${{ github.event.inputs.source_image }} ${{ env.TARGET_IMAGE_NAME }}:latest
          fi
          
          # List images to verify
          docker images

      - name: Push image to GitHub Container Registry
        run: |
          # Push the specific tag
          docker push ${{ env.TARGET_IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}
          
          # Push latest tag if not already latest
          if [ "${{ env.TARGET_IMAGE_TAG }}" != "latest" ]; then
            docker push ${{ env.TARGET_IMAGE_NAME }}:latest
          fi

      - name: Status
        shell: bash
        run: |
          echo "Successfully pulled and pushed image:"
          echo "Source: ${{ github.event.inputs.source_image }}"
          echo "Target: ${{ env.TARGET_IMAGE_NAME }}:${{ env.TARGET_IMAGE_TAG }}"
