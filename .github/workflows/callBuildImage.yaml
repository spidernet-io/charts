name: Call Build Image

env:
  IMAGE_REPO: ${{ github.repository }}
  ONLINE_REGISTER: ghcr.io
  ONLINE_REGISTER_USER: ${{ github.actor }}
  ONLINE_REGISTER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

on:
  workflow_call:
    inputs:
      code_sha:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      push_image:
        required: true
        type: string
      image_name:
        required: true
        type: string
      dockerfile_dirctory:
        required: true
        type: string
      build_platform:
        required: true
        type: string
      upload_artifact:
        required: true
        type: string
      generateDockerfileScript:
        required: false
        type: string
    outputs:
      imageArtifactName:
        description: "image Artifact Name"
        value: ${{ jobs.build-and-push.outputs.upload_image_artifact_name }}

permissions: write-all

jobs:
  build-and-push:
    timeout-minutes: 30
    environment: release-base-images
    runs-on: ubuntu-latest
    outputs:
      upload_image_artifact_name: ${{ env.upload_image_artifact_name }}
    steps:
      - name: Free Disk Space (Ubuntu)
        # https://github.com/spidernet-io/spiderpool/issues/3277
        # https://github.com/actions/virtual-environments/issues/709
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3.0.0

      - name: Get Info
        run: |
          echo '${{ toJSON(github) }}'
          echo "code_sha=${{ inputs.code_sha }}" >> $GITHUB_ENV
          echo "push_image=${{ inputs.push_image }}" >> $GITHUB_ENV
          echo "image_name=${{ inputs.image_name }}" >> $GITHUB_ENV
          echo "dockerfile_dirctory=${{ inputs.dockerfile_dirctory }}" >> $GITHUB_ENV
          echo "build_platform=${{ inputs.build_platform }}" >> $GITHUB_ENV
          echo "upload_artifact=${{ inputs.upload_artifact }}" >> $GITHUB_ENV
          echo "upload_image_artifact_name=image-$( date +%Y%m%d%H%M%S%N )" >> $GITHUB_ENV
          # spidernet-io/charts -> spidernet-io
          org_name=$( awk -F'/' '{print $1}'  <<< "${{ env.IMAGE_REPO }}" )
          # ghcr.io/spidernet-io/rdma-tools
          echo "image_full_name=${{ env.ONLINE_REGISTER }}/${org_name}/${{ inputs.image_name }}" >> $GITHUB_ENV

      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          # fetch-depth: 0
          ref: ${{ env.code_sha }}

      - name: Getting Build Arg
        run: |
          GIT_COMMIT_VERSION=$( git show -s --format='format:%H')
          GIT_COMMIT_TIME=$( git show -s --format='format:%aI')
          echo "commitver=${GIT_COMMIT_VERSION}" >> $GITHUB_ENV
          echo "committime=${GIT_COMMIT_TIME}" >> $GITHUB_ENV
          image_tag=${{ inputs.image_tag }}
          if [ -n "${image_tag}" ]; then
             echo "image_tag=${{ inputs.image_tag }}" >> $GITHUB_ENV
          else
             dockerfile_dirctory=${{ inputs.dockerfile_dirctory }}
             image_tag=$( git ls-tree --full-tree HEAD -- ${dockerfile_dirctory} | awk '{ print $3 }' )
             [ -n "${image_tag}" ] || { echo "error, failed to get image_tag from commit id"; exit 1 ; }
             echo "image_tag=${image_tag}" >> $GITHUB_ENV
          fi
          GENERATE_SCRIPT_PATH=${{ inputs.generateDockerfileScript }}
          if [ -n "${GENERATE_SCRIPT_PATH}" ]; then
              [ -f "${GENERATE_SCRIPT_PATH}" ] || { echo "error, failed to find generateDockerfileScript: ${GENERATE_SCRIPT_PATH}"; exit 1 ; }
              DIR_PATH=$( dirname ${GENERATE_SCRIPT_PATH} )
              SCRIPT_NAME=$( basename ${GENERATE_SCRIPT_PATH} )
              cd ${DIR_PATH}
              chmod +x ${SCRIPT_NAME}
              ./${SCRIPT_NAME}              
          fi

      - name: Login to online register
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ env.ONLINE_REGISTER_USER }}
          password: ${{ env.ONLINE_REGISTER_PASSWORD }}
          registry: ${{ env.ONLINE_REGISTER }}

      - name: Release build ${{ env.image_name }}
        uses: docker/build-push-action@v5.4.0
        continue-on-error: false
        id: docker_build_release
        with:
          context: ./${{ env.dockerfile_dirctory }}
          file: ./${{ env.dockerfile_dirctory }}/Dockerfile
          push: ${{ env.push_image }}
          provenance: false
          github-token: ${{ secrets.WELAN_PAT }}
          platforms: ${{ env.build_platform }}
          outputs: type=tar,dest=/tmp/${{ env.upload_image_artifact_name }}.tar
          tags: |
            ${{ env.image_full_name }}:${{ env.image_tag }}
          build-args: |
            GIT_COMMIT_VERSION=${{ env.commitver }}
            GIT_COMMIT_TIME=${{ env.committime }}
            VERSION=${{ env.code_sha }}

      # Upload artifact race images tar
      - name: Upload image tar
        if: ${{ env.upload_artifact == 'true' }}
        uses: actions/upload-artifact@v3.1.3
        with:
          name: ${{ env.upload_image_artifact_name }}
          path: /tmp/${{ env.upload_image_artifact_name }}.tar
          retention-days: 1

      - name: Image Release Digest
        shell: bash
        run: |
          mkdir -p image-digest/
          echo "## ${{ env.image_name }}" > image-digest/${{ env.image_name }}.txt
          echo "" >> image-digest/${{ env.image_name }}.txt
          echo "\`${{ env.image_full_name }}:${{ env.image_tag }}@${{ steps.docker_build_release.outputs.digest }}\`" >> image-digest/${{ env.image_name }}.txt
          echo "" >> image-digest/${{ env.image_name }}.txt

      - name: Upload artifact digests
        uses: actions/upload-artifact@v3.1.3
        with:
          name: image-digest
          path: image-digest
          retention-days: 1

  image-digests:
    name: Display Digests
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Downloading Image Digests
        shell: bash
        run: |
          mkdir -p image-digest/

      - name: Download digests of all images built
        uses: actions/download-artifact@v3
        with:
          path: image-digest/
          name: image-digest

      - name: Image Digests Output
        shell: bash
        run: |
          cd image-digest/
          find -type f | sort | xargs -d '\n' cat
